# --------------------------------------------------------
# Fast R-CNN
# Copyright (c) 2015 Microsoft
# Licensed under The MIT License [see LICENSE for details]
# Written by Ross Girshick
# --------------------------------------------------------

"""Factory method for easily getting imdbs by name."""

# pascal_vol(image_set [,devkit_path, listfile, clsfile])  complete args recomnended
__sets = {}

import datasets.pascal_voc
import numpy as np
import os
#def _selective_search_IJCV_top_k(split, year, top_k):
#    """Return an imdb that uses the top k proposals from the selective search
#    IJCV code.
#    """
#    imdb = datasets.pascal_voc(split, year)
#    imdb.roidb_handler = imdb.selective_search_IJCV_roidb
#    imdb.config['top_k'] = top_k
#    return imdb

# Set up voc_<year>_<split> using selective search "fast" mode
#for year in ['2007', '2012']:
#    for split in ['train', 'val', 'trainval', 'test']:
#        name = 'voc_{}_{}'.format(year, split)
#        __sets[name] = (lambda split=split, year=year:
#                datasets.pascal_voc(split, year))
ROOT_DIR = os.path.join(os.path.dirname(__file__), '..', '..')
dev_pascal = os.path.join(ROOT_DIR, 'data', 'pascal')
dev0 = os.path.join(ROOT_DIR, "data", "Rivetdev")
devbp = os.path.join(ROOT_DIR, "data", "Backpackdev")
imbp = "/data/disk2/1451990544_backpack/Annotations/backpack"
cls21 = os.path.join(ROOT_DIR, "data", "21class")
testlist = os.path.join(ROOT_DIR, 'data', '21class','testset.short.lst')
imgdev = os.path.join(ROOT_DIR,'data','ImageNetdev')
cls24dev = os.path.join(ROOT_DIR,'data','cls24')
cls23dev = os.path.join(ROOT_DIR,'data','cls23')
newp = os.path.join(ROOT_DIR,'data','t2')
#the two files below can be Nones, which will later cause the class use default paths
#listfile = os.path.join(dev0, "image_set.lst")
#clsfile = os.path.join(dev0, "classes.lst")
__sets['pascal'] = (lambda data='pascal',devkit_path=dev_pascal:
                    datasets.pascal_voc(data,devkit_path,devkit_path) )
__sets['pascalt'] = (lambda data='test',devkit_path=dev_pascal:
                    datasets.pascal_voc(data,devkit_path,devkit_path,'trainset.lst') )

__sets["rivet_test"] = (lambda data = "rivet_test", devkit_path = dev0: 
                        datasets.pascal_voc(data, devkit_path))
__sets["rtest"] = (lambda data = "test", devkit_path = dev0:
                   datasets.pascal_voc(data,devkit_path))
__sets["backpack"] = (lambda data = "backpacktrain", devkit_path = devbp, 
                      imagedir=imbp:
                      datasets.pascal_voc(data, devkit_path, imagedir) )
__sets["cls21"] = (lambda data = "cls21", devkit_path = cls21:
                   datasets.pascal_voc(data, devkit_path, devkit_path))
__sets["cls21t"] = (lambda data = "test", devkit_path = cls21:
                   datasets.pascal_voc(data, devkit_path, devkit_path,listfile_path=testlist))
__sets["imgnet"] = (lambda data = "imgnet196", devkit_path = imgdev:
                   datasets.pascal_voc(data, devkit_path))
__sets["imgnettest"] = (lambda data = "test", devkit_path = imgdev:
                   datasets.pascal_voc(data, devkit_path))
__sets['cls24'] = (lambda data = 'cls24',devkit_path = cls24dev:
                   datasets.pascal_voc(data,devkit_path,devkit_path))
__sets['cls24t'] = (lambda data = 'test',devkit_path = cls24dev:
                   datasets.pascal_voc(data,devkit_path,devkit_path))
__sets['cls23'] = (lambda data = 'cls23',devkit_path = cls23dev:
                   datasets.pascal_voc(data,devkit_path,devkit_path))
__sets['cls23t'] = (lambda data = 'test',devkit_path = cls23dev:
                   datasets.pascal_voc(data,devkit_path,devkit_path))
__sets['new']=(lambda data='new',devkit=newp:datasets.pascal_voc(data,devkit,devkit))
# but only returning the first k boxes
#for top_k in np.arange(1000, 11000, 1000):
#    for year in ['2007', '2012']:
#        for split in ['train', 'val', 'trainval', 'test']:
#            name = 'voc_{}_{}_top_{:d}'.format(year, split, top_k)
#            __sets[name] = (lambda split=split, year=year, top_k=top_k:
#                    _selective_search_IJCV_top_k(split, year, top_k))

def get_imdb(name):
    """Get an imdb (image database) by name."""
    if not __sets.has_key(name):
        raise KeyError('Unknown dataset: {}'.format(name))
    return __sets[name]()

def list_imdbs():
    """List all registered imdbs."""
    return __sets.keys()
